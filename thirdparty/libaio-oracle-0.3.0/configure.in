dnl Process this file with autoconf to produce a configure script.

AC_INIT(libaio-oracle.h)

#
# Versioning ideas, copied from GTK+
#
# Making releases:
#   MICRO_VERSION += 1;
#   INTERFACE_AGE += 1;
#   BINARY_AGE += 1;
# If any functions have been added, set INTERFACE_AGE to 0.
# If backwards compatibility has been broken, set BINARY_AGE and
# INTEFACE_AGE to 0.
#
MAJOR_VERSION=0
MINOR_VERSION=3
MICRO_VERSION=0
INTERFACE_AGE=0
BINARY_AGE=0
VERSION="${MAJOR_VERSION}.${MINOR_VERSION}.${MICRO_VERSION}"
AC_SUBST(MAJOR_VERSION)
AC_SUBST(MINOR_VERSION)
AC_SUBST(MICRO_VERSION)
AC_SUBST(INTERFACE_AGE)
AC_SUBST(BINARY_AGE)
AC_SUBST(VERSION)

# libtool versioning
LT_RELEASE=$MAJOR_VERSION.$MINOR_VERSION
LT_CURRENT=`expr $MICRO_VERSION - $INTERFACE_AGE`
LT_REVISION=$INTERFACE_AGE
LT_AGE=`expr $BINARY_AGE - $INTERFACE_AGE`
LT_CURRENT_MINUS_AGE=`expr $LT_CURRENT - $LT_AGE`
AC_SUBST(LT_RELEASE)
AC_SUBST(LT_CURRENT)
AC_SUBST(LT_REVISION)
AC_SUBST(LT_AGE)
AC_SUBST(LT_CURRENT_MINUS_AGE)

AM_INIT_AUTOMAKE(libaio-oracle, $VERSION)

dnl Checks for programs.
AC_PROG_CC
AM_C_PROTOTYPES
AM_PROG_CC_STDC
AC_C_CONST
AC_PROG_INSTALL

AM_MAINTAINER_MODE

AM_PROG_LIBTOOL

AC_ARG_ENABLE(ansi, [  --enable-ansi           turn on strict ansi [default=no]], , enable_ansi=no)

if test "x$GCC" = "xyes"; then
  case " $CFLAGS " in
  *[[\ \	]]-Wall[[\ \	]]*) ;;
  *) CFLAGS="$CFLAGS -Wall" ;;
  esac

  if test "x$enable_ansi" = "xyes"; then
    case " $CFLAGS " in
    *[[\ \	]]-ansi[[\ \	]]*) ;;
    *) CFLAGS="$CFLAGS -ansi" ;;
    esac

    case " $CFLAGS " in
    *[[\ \	]]-pedantic[[\ \	]]*) ;;
    *) CFLAGS="$CFLAGS -pedantic" ;;
    esac
  fi
fi

dnl Checks for header files.
AC_HEADER_STDC

AIO_LIBS="-laio"
AC_SUBST(AIO_LIBS)

AC_MSG_CHECKING([for libaio >= 0.3])
OLD_LDFLAGS="$LDFLAGS"
LDFLAGS="$LDFLAGS $AIO_LIBS"
AC_TRY_LINK([
#include <libaio.h>
], [
    struct io_event events[1];
    long ret;

    ret = io_getevents(0, 1, 1, events, NULL);

    return(0);
], [AC_MSG_RESULT([yes])
    LDFLAGS="$OLD_LDFLAGS"], [AC_MSG_RESULT([no])
    AC_MSG_CHECKING([for libaio 0.1])
    AC_TRY_LINK([
#include <libaio.h>
], [
    struct io_event events[1];
    long ret;

    ret = io_getevents(0, 1, events, NULL);

    return(0);
], [AC_MSG_RESULT([yes])
    LDFLAGS="$OLD_LDFLAGS"
    CPPFLAGS="$CPPFLAGS -DOLD_LIBAIO"], [AC_MSG_RESULT([no])
    AC_MSG_ERROR([
*** libaio is required.])])])

dnl # This is for modern autoconf
dnl AC_CHECK_MEMBER(struct iocb.aio_data,,
dnl                 [CPPFLAGS="$CPPFLAGS -DNEED_AIO_DATA"], [
dnl #include <libaio.h>
dnl ])

dnl # This is because RHAS uses autoconf 2.13
AC_MSG_CHECKING(for struct iocb.aio_data)
AC_TRY_COMPILE([
#include <libaio.h>
], [
    struct iocb cb;

    cb.aio_data = NULL;
], [AC_MSG_RESULT(yes)], [
    AC_MSG_RESULT(no)
    CPPFLAGS="$CPPFLAGS -DNEED_AIO_DATA"])

AC_OUTPUT([
Makefile
])
