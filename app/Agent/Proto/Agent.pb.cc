// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Agent.proto

#include "Agent.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Agent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AgentBhs_Agent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Agent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Chap_Agent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Agent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HeartBeatReponse_Agent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Agent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HeartBeatRequest_Agent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Agent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoginReponse_Agent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Agent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LoginRequest_Agent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Agent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NodeInfo_Agent_2eproto;
namespace Agent {
class AgentBhsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AgentBhs> _instance;
} _AgentBhs_default_instance_;
class ChapDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Chap> _instance;
} _Chap_default_instance_;
class LoginRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoginRequest> _instance;
} _LoginRequest_default_instance_;
class LoginReponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoginReponse> _instance;
} _LoginReponse_default_instance_;
class NodeInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NodeInfo> _instance;
} _NodeInfo_default_instance_;
class HeartBeatRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HeartBeatRequest> _instance;
} _HeartBeatRequest_default_instance_;
class HeartBeatReponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HeartBeatReponse> _instance;
} _HeartBeatReponse_default_instance_;
class AgentPduDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AgentPdu> _instance;
} _AgentPdu_default_instance_;
}  // namespace Agent
static void InitDefaultsscc_info_AgentBhs_Agent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Agent::_AgentBhs_default_instance_;
    new (ptr) ::Agent::AgentBhs();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Agent::AgentBhs::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AgentBhs_Agent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AgentBhs_Agent_2eproto}, {}};

static void InitDefaultsscc_info_AgentPdu_Agent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Agent::_AgentPdu_default_instance_;
    new (ptr) ::Agent::AgentPdu();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Agent::AgentPdu::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_AgentPdu_Agent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_AgentPdu_Agent_2eproto}, {
      &scc_info_AgentBhs_Agent_2eproto.base,
      &scc_info_LoginRequest_Agent_2eproto.base,
      &scc_info_LoginReponse_Agent_2eproto.base,
      &scc_info_HeartBeatRequest_Agent_2eproto.base,
      &scc_info_HeartBeatReponse_Agent_2eproto.base,}};

static void InitDefaultsscc_info_Chap_Agent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Agent::_Chap_default_instance_;
    new (ptr) ::Agent::Chap();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Agent::Chap::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Chap_Agent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Chap_Agent_2eproto}, {}};

static void InitDefaultsscc_info_HeartBeatReponse_Agent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Agent::_HeartBeatReponse_default_instance_;
    new (ptr) ::Agent::HeartBeatReponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Agent::HeartBeatReponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HeartBeatReponse_Agent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_HeartBeatReponse_Agent_2eproto}, {
      &scc_info_NodeInfo_Agent_2eproto.base,}};

static void InitDefaultsscc_info_HeartBeatRequest_Agent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Agent::_HeartBeatRequest_default_instance_;
    new (ptr) ::Agent::HeartBeatRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Agent::HeartBeatRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HeartBeatRequest_Agent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HeartBeatRequest_Agent_2eproto}, {}};

static void InitDefaultsscc_info_LoginReponse_Agent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Agent::_LoginReponse_default_instance_;
    new (ptr) ::Agent::LoginReponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Agent::LoginReponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoginReponse_Agent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LoginReponse_Agent_2eproto}, {}};

static void InitDefaultsscc_info_LoginRequest_Agent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Agent::_LoginRequest_default_instance_;
    new (ptr) ::Agent::LoginRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Agent::LoginRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LoginRequest_Agent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LoginRequest_Agent_2eproto}, {
      &scc_info_Chap_Agent_2eproto.base,}};

static void InitDefaultsscc_info_NodeInfo_Agent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Agent::_NodeInfo_default_instance_;
    new (ptr) ::Agent::NodeInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Agent::NodeInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NodeInfo_Agent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NodeInfo_Agent_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Agent_2eproto[8];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_Agent_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Agent_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Agent_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Agent::AgentBhs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Agent::AgentBhs, verify_),
  PROTOBUF_FIELD_OFFSET(::Agent::AgentBhs, router_),
  PROTOBUF_FIELD_OFFSET(::Agent::AgentBhs, command_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Agent::Chap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Agent::Chap, phase_),
  PROTOBUF_FIELD_OFFSET(::Agent::Chap, alg_),
  PROTOBUF_FIELD_OFFSET(::Agent::Chap, hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Agent::LoginRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Agent::LoginRequest, name_),
  PROTOBUF_FIELD_OFFSET(::Agent::LoginRequest, chap_),
  PROTOBUF_FIELD_OFFSET(::Agent::LoginRequest, net_),
  PROTOBUF_FIELD_OFFSET(::Agent::LoginRequest, token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Agent::LoginReponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Agent::LoginReponse, msg_),
  PROTOBUF_FIELD_OFFSET(::Agent::LoginReponse, ttl_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Agent::NodeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Agent::NodeInfo, name_),
  PROTOBUF_FIELD_OFFSET(::Agent::NodeInfo, cid_),
  PROTOBUF_FIELD_OFFSET(::Agent::NodeInfo, status_),
  PROTOBUF_FIELD_OFFSET(::Agent::NodeInfo, net_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Agent::HeartBeatRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Agent::HeartBeatRequest, name_),
  PROTOBUF_FIELD_OFFSET(::Agent::HeartBeatRequest, cid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Agent::HeartBeatReponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Agent::HeartBeatReponse, nodes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Agent::AgentPdu, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Agent::AgentPdu, bhs_),
  PROTOBUF_FIELD_OFFSET(::Agent::AgentPdu, reqlogin_),
  PROTOBUF_FIELD_OFFSET(::Agent::AgentPdu, rsplogin_),
  PROTOBUF_FIELD_OFFSET(::Agent::AgentPdu, reqhb_),
  PROTOBUF_FIELD_OFFSET(::Agent::AgentPdu, rsphb_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Agent::AgentBhs)},
  { 8, -1, sizeof(::Agent::Chap)},
  { 16, -1, sizeof(::Agent::LoginRequest)},
  { 25, -1, sizeof(::Agent::LoginReponse)},
  { 32, -1, sizeof(::Agent::NodeInfo)},
  { 41, -1, sizeof(::Agent::HeartBeatRequest)},
  { 48, -1, sizeof(::Agent::HeartBeatReponse)},
  { 54, -1, sizeof(::Agent::AgentPdu)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Agent::_AgentBhs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Agent::_Chap_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Agent::_LoginRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Agent::_LoginReponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Agent::_NodeInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Agent::_HeartBeatRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Agent::_HeartBeatReponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Agent::_AgentPdu_default_instance_),
};

const char descriptor_table_protodef_Agent_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013Agent.proto\022\005Agent\";\n\010AgentBhs\022\016\n\006veri"
  "fy\030\001 \001(\006\022\016\n\006router\030\002 \001(\006\022\017\n\007command\030\003 \001("
  "\006\"0\n\004Chap\022\r\n\005phase\030\001 \001(\r\022\013\n\003alg\030\002 \001(\r\022\014\n"
  "\004hash\030\003 \001(\014\"c\n\014LoginRequest\022\014\n\004name\030\001 \001("
  "\014\022\031\n\004chap\030\003 \001(\0132\013.Agent.Chap\022\033\n\003net\030\004 \001("
  "\0162\016.Agent.NetType\022\r\n\005token\030\005 \001(\014\"(\n\014Logi"
  "nReponse\022\013\n\003msg\030\001 \001(\014\022\013\n\003ttl\030\002 \001(\007\"s\n\010No"
  "deInfo\022\014\n\004name\030\001 \001(\014\022\031\n\003cid\030\002 \001(\0162\014.Agen"
  "t.AppId\022!\n\006status\030\003 \001(\0162\021.Agent.NodeStat"
  "us\022\033\n\003net\030\004 \001(\0162\016.Agent.NetType\";\n\020Heart"
  "BeatRequest\022\014\n\004name\030\001 \001(\014\022\031\n\003cid\030\002 \001(\0162\014"
  ".Agent.AppId\"2\n\020HeartBeatReponse\022\036\n\005node"
  "s\030\001 \003(\0132\017.Agent.NodeInfo\"\306\001\n\010AgentPdu\022\034\n"
  "\003bhs\030\001 \001(\0132\017.Agent.AgentBhs\022%\n\010reqLogin\030"
  "\002 \001(\0132\023.Agent.LoginRequest\022%\n\010rspLogin\030\003"
  " \001(\0132\023.Agent.LoginReponse\022&\n\005reqHb\030\004 \001(\013"
  "2\027.Agent.HeartBeatRequest\022&\n\005rspHb\030\005 \001(\013"
  "2\027.Agent.HeartBeatReponse*\377\002\n\005Errno\022\023\n\017E"
  "RR_EXEC_SUCESS\020\000\022\024\n\020ERR_EXEC_FAILURE\020\001\022\024"
  "\n\020ERR_LOGIN_SUCESS\020\002\022\025\n\021ERR_LOGIN_FAILUR"
  "E\020\003\022\024\n\020ERR_LOGIN_UNAUTH\020\004\022\024\n\020ERR_PEER_OF"
  "FLINE\020\005\022\025\n\021ERR_SEND_TIMEROUT\020\006\022\025\n\021ERR_RE"
  "CV_TIMEROUT\020\007\022\026\n\022ERR_CANNOT_IN_LOOP\020\010\022\027\n"
  "\023ERR_AGENT_NOT_START\020\t\022\026\n\022ERR_ENCODE_FAI"
  "LURE\020\n\022\026\n\022ERR_DECODE_FAILURE\020\013\022\025\n\021ERR_UN"
  "KNOWN_MAGIC\020\014\022\027\n\023ERR_UNKNOWN_COMMAND\020\r\022\031"
  "\n\025ERR_REPEAT_REGISTERED\020\016\022\030\n\024ERR_SERVER_"
  "INNER_ERR\020\017*\374\002\n\007Command\022\031\n\025CMD_REQ_NODE_"
  "REGISTER\020\000\022\033\n\027CMD_REQ_NODE_UNREGISTER\020\001\022"
  "\032\n\026CMD_REQ_NODE_HEARTBEAT\020\002\022\036\n\032CMD_REQ_N"
  "ODE_STATUS_REPORT\020\003\022\037\n\033CMD_REQ_NODE_LOGG"
  "ER_COLLECT\020\004\022\035\n\031CMD_REQ_NODE_LOGGER_LEVE"
  "L\020\005\022\026\n\022CMD_REQ_NODE_QUERY\020\006\022\027\n\023CMD_REQ_N"
  "ODE_NOTIFY\020\007\022 \n\034CMD_REQ_NODE_LEADER_ELEC"
  "TION\020\010\022\031\n\024CMD_REQ_STORAGE_READ\020\200\002\022\032\n\025CMD"
  "_REQ_STORAGE_WRITE\020\201\002\022\030\n\023CMD_REQ_MOBILE_"
  "READ\020\202\002\022\031\n\024CMD_REQ_MOBILE_WRITE\020\203\002*p\n\005Ap"
  "pId\022\017\n\013APP_ONESELF\020\000\022\r\n\tAPP_AGENT\020\001\022\r\n\tA"
  "PP_GUARD\020\002\022\016\n\nAPP_MOBILE\020\003\022\014\n\010APP_DLNA\020\004"
  "\022\014\n\010APP_UPNP\020\005\022\014\n\010APP_DDNS\020\006*M\n\010PackType"
  "\022\020\n\014PACK_BINNARY\020\000\022\r\n\tPACK_JSON\020\001\022\021\n\rPAC"
  "K_PROTOBUF\020\002\022\r\n\tPACK_BUTT\020\003* \n\006Opcode\022\n\n"
  "\006OP_REQ\020\000\022\n\n\006OP_RSP\020\001*4\n\007NetType\022\013\n\007NET_"
  "ETH\020\000\022\014\n\010NET_WLAN\020\001\022\016\n\nNET_MOBILE\020\002*U\n\nN"
  "odeStatus\022\021\n\rSTATUS_ONLINE\020\000\022\022\n\016STATUS_O"
  "FFLINE\020\001\022\017\n\013STATUS_IDLE\020\002\022\017\n\013STATUS_BUSY"
  "\020\003b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Agent_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Agent_2eproto_sccs[8] = {
  &scc_info_AgentBhs_Agent_2eproto.base,
  &scc_info_AgentPdu_Agent_2eproto.base,
  &scc_info_Chap_Agent_2eproto.base,
  &scc_info_HeartBeatReponse_Agent_2eproto.base,
  &scc_info_HeartBeatRequest_Agent_2eproto.base,
  &scc_info_LoginReponse_Agent_2eproto.base,
  &scc_info_LoginRequest_Agent_2eproto.base,
  &scc_info_NodeInfo_Agent_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Agent_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Agent_2eproto = {
  false, false, descriptor_table_protodef_Agent_2eproto, "Agent.proto", 1850,
  &descriptor_table_Agent_2eproto_once, descriptor_table_Agent_2eproto_sccs, descriptor_table_Agent_2eproto_deps, 8, 0,
  schemas, file_default_instances, TableStruct_Agent_2eproto::offsets,
  file_level_metadata_Agent_2eproto, 8, file_level_enum_descriptors_Agent_2eproto, file_level_service_descriptors_Agent_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Agent_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Agent_2eproto)), true);
namespace Agent {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Errno_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Agent_2eproto);
  return file_level_enum_descriptors_Agent_2eproto[0];
}
bool Errno_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Command_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Agent_2eproto);
  return file_level_enum_descriptors_Agent_2eproto[1];
}
bool Command_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 256:
    case 257:
    case 258:
    case 259:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AppId_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Agent_2eproto);
  return file_level_enum_descriptors_Agent_2eproto[2];
}
bool AppId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PackType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Agent_2eproto);
  return file_level_enum_descriptors_Agent_2eproto[3];
}
bool PackType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Opcode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Agent_2eproto);
  return file_level_enum_descriptors_Agent_2eproto[4];
}
bool Opcode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NetType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Agent_2eproto);
  return file_level_enum_descriptors_Agent_2eproto[5];
}
bool NetType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NodeStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Agent_2eproto);
  return file_level_enum_descriptors_Agent_2eproto[6];
}
bool NodeStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void AgentBhs::InitAsDefaultInstance() {
}
class AgentBhs::_Internal {
 public:
};

AgentBhs::AgentBhs(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Agent.AgentBhs)
}
AgentBhs::AgentBhs(const AgentBhs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&verify_, &from.verify_,
    static_cast<size_t>(reinterpret_cast<char*>(&command_) -
    reinterpret_cast<char*>(&verify_)) + sizeof(command_));
  // @@protoc_insertion_point(copy_constructor:Agent.AgentBhs)
}

void AgentBhs::SharedCtor() {
  ::memset(&verify_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&command_) -
      reinterpret_cast<char*>(&verify_)) + sizeof(command_));
}

AgentBhs::~AgentBhs() {
  // @@protoc_insertion_point(destructor:Agent.AgentBhs)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AgentBhs::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AgentBhs::ArenaDtor(void* object) {
  AgentBhs* _this = reinterpret_cast< AgentBhs* >(object);
  (void)_this;
}
void AgentBhs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AgentBhs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AgentBhs& AgentBhs::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AgentBhs_Agent_2eproto.base);
  return *internal_default_instance();
}


void AgentBhs::Clear() {
// @@protoc_insertion_point(message_clear_start:Agent.AgentBhs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&verify_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&command_) -
      reinterpret_cast<char*>(&verify_)) + sizeof(command_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AgentBhs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // fixed64 verify = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          verify_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // fixed64 router = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          router_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // fixed64 command = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          command_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AgentBhs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Agent.AgentBhs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 verify = 1;
  if (this->verify() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_verify(), target);
  }

  // fixed64 router = 2;
  if (this->router() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_router(), target);
  }

  // fixed64 command = 3;
  if (this->command() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_command(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Agent.AgentBhs)
  return target;
}

size_t AgentBhs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Agent.AgentBhs)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // fixed64 verify = 1;
  if (this->verify() != 0) {
    total_size += 1 + 8;
  }

  // fixed64 router = 2;
  if (this->router() != 0) {
    total_size += 1 + 8;
  }

  // fixed64 command = 3;
  if (this->command() != 0) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AgentBhs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Agent.AgentBhs)
  GOOGLE_DCHECK_NE(&from, this);
  const AgentBhs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AgentBhs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Agent.AgentBhs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Agent.AgentBhs)
    MergeFrom(*source);
  }
}

void AgentBhs::MergeFrom(const AgentBhs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Agent.AgentBhs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.verify() != 0) {
    _internal_set_verify(from._internal_verify());
  }
  if (from.router() != 0) {
    _internal_set_router(from._internal_router());
  }
  if (from.command() != 0) {
    _internal_set_command(from._internal_command());
  }
}

void AgentBhs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Agent.AgentBhs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgentBhs::CopyFrom(const AgentBhs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Agent.AgentBhs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentBhs::IsInitialized() const {
  return true;
}

void AgentBhs::InternalSwap(AgentBhs* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AgentBhs, command_)
      + sizeof(AgentBhs::command_)
      - PROTOBUF_FIELD_OFFSET(AgentBhs, verify_)>(
          reinterpret_cast<char*>(&verify_),
          reinterpret_cast<char*>(&other->verify_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AgentBhs::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Chap::InitAsDefaultInstance() {
}
class Chap::_Internal {
 public:
};

Chap::Chap(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Agent.Chap)
}
Chap::Chap(const Chap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hash().empty()) {
    hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_hash(),
      GetArena());
  }
  ::memcpy(&phase_, &from.phase_,
    static_cast<size_t>(reinterpret_cast<char*>(&alg_) -
    reinterpret_cast<char*>(&phase_)) + sizeof(alg_));
  // @@protoc_insertion_point(copy_constructor:Agent.Chap)
}

void Chap::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Chap_Agent_2eproto.base);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&phase_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&alg_) -
      reinterpret_cast<char*>(&phase_)) + sizeof(alg_));
}

Chap::~Chap() {
  // @@protoc_insertion_point(destructor:Agent.Chap)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Chap::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Chap::ArenaDtor(void* object) {
  Chap* _this = reinterpret_cast< Chap* >(object);
  (void)_this;
}
void Chap::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Chap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Chap& Chap::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Chap_Agent_2eproto.base);
  return *internal_default_instance();
}


void Chap::Clear() {
// @@protoc_insertion_point(message_clear_start:Agent.Chap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&phase_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&alg_) -
      reinterpret_cast<char*>(&phase_)) + sizeof(alg_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Chap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 phase = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          phase_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 alg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          alg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes hash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Chap::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Agent.Chap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 phase = 1;
  if (this->phase() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_phase(), target);
  }

  // uint32 alg = 2;
  if (this->alg() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_alg(), target);
  }

  // bytes hash = 3;
  if (this->hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Agent.Chap)
  return target;
}

size_t Chap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Agent.Chap)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes hash = 3;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_hash());
  }

  // uint32 phase = 1;
  if (this->phase() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_phase());
  }

  // uint32 alg = 2;
  if (this->alg() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_alg());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Chap::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Agent.Chap)
  GOOGLE_DCHECK_NE(&from, this);
  const Chap* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Chap>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Agent.Chap)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Agent.Chap)
    MergeFrom(*source);
  }
}

void Chap::MergeFrom(const Chap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Agent.Chap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hash().size() > 0) {
    _internal_set_hash(from._internal_hash());
  }
  if (from.phase() != 0) {
    _internal_set_phase(from._internal_phase());
  }
  if (from.alg() != 0) {
    _internal_set_alg(from._internal_alg());
  }
}

void Chap::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Agent.Chap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Chap::CopyFrom(const Chap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Agent.Chap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chap::IsInitialized() const {
  return true;
}

void Chap::InternalSwap(Chap* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  hash_.Swap(&other->hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Chap, alg_)
      + sizeof(Chap::alg_)
      - PROTOBUF_FIELD_OFFSET(Chap, phase_)>(
          reinterpret_cast<char*>(&phase_),
          reinterpret_cast<char*>(&other->phase_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Chap::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoginRequest::InitAsDefaultInstance() {
  ::Agent::_LoginRequest_default_instance_._instance.get_mutable()->chap_ = const_cast< ::Agent::Chap*>(
      ::Agent::Chap::internal_default_instance());
}
class LoginRequest::_Internal {
 public:
  static const ::Agent::Chap& chap(const LoginRequest* msg);
};

const ::Agent::Chap&
LoginRequest::_Internal::chap(const LoginRequest* msg) {
  return *msg->chap_;
}
LoginRequest::LoginRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Agent.LoginRequest)
}
LoginRequest::LoginRequest(const LoginRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_token(),
      GetArena());
  }
  if (from._internal_has_chap()) {
    chap_ = new ::Agent::Chap(*from.chap_);
  } else {
    chap_ = nullptr;
  }
  net_ = from.net_;
  // @@protoc_insertion_point(copy_constructor:Agent.LoginRequest)
}

void LoginRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoginRequest_Agent_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&chap_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&net_) -
      reinterpret_cast<char*>(&chap_)) + sizeof(net_));
}

LoginRequest::~LoginRequest() {
  // @@protoc_insertion_point(destructor:Agent.LoginRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoginRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete chap_;
}

void LoginRequest::ArenaDtor(void* object) {
  LoginRequest* _this = reinterpret_cast< LoginRequest* >(object);
  (void)_this;
}
void LoginRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoginRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoginRequest& LoginRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoginRequest_Agent_2eproto.base);
  return *internal_default_instance();
}


void LoginRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Agent.LoginRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && chap_ != nullptr) {
    delete chap_;
  }
  chap_ = nullptr;
  net_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Agent.Chap chap = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_chap(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Agent.NetType net = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_net(static_cast<::Agent::NetType>(val));
        } else goto handle_unusual;
        continue;
      // bytes token = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Agent.LoginRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .Agent.Chap chap = 3;
  if (this->has_chap()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::chap(this), target, stream);
  }

  // .Agent.NetType net = 4;
  if (this->net() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_net(), target);
  }

  // bytes token = 5;
  if (this->token().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Agent.LoginRequest)
  return target;
}

size_t LoginRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Agent.LoginRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // bytes token = 5;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_token());
  }

  // .Agent.Chap chap = 3;
  if (this->has_chap()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *chap_);
  }

  // .Agent.NetType net = 4;
  if (this->net() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_net());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Agent.LoginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoginRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Agent.LoginRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Agent.LoginRequest)
    MergeFrom(*source);
  }
}

void LoginRequest::MergeFrom(const LoginRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Agent.LoginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.token().size() > 0) {
    _internal_set_token(from._internal_token());
  }
  if (from.has_chap()) {
    _internal_mutable_chap()->::Agent::Chap::MergeFrom(from._internal_chap());
  }
  if (from.net() != 0) {
    _internal_set_net(from._internal_net());
  }
}

void LoginRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Agent.LoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRequest::CopyFrom(const LoginRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Agent.LoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRequest::IsInitialized() const {
  return true;
}

void LoginRequest::InternalSwap(LoginRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoginRequest, net_)
      + sizeof(LoginRequest::net_)
      - PROTOBUF_FIELD_OFFSET(LoginRequest, chap_)>(
          reinterpret_cast<char*>(&chap_),
          reinterpret_cast<char*>(&other->chap_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoginReponse::InitAsDefaultInstance() {
}
class LoginReponse::_Internal {
 public:
};

LoginReponse::LoginReponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Agent.LoginReponse)
}
LoginReponse::LoginReponse(const LoginReponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_msg(),
      GetArena());
  }
  ttl_ = from.ttl_;
  // @@protoc_insertion_point(copy_constructor:Agent.LoginReponse)
}

void LoginReponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoginReponse_Agent_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ttl_ = 0u;
}

LoginReponse::~LoginReponse() {
  // @@protoc_insertion_point(destructor:Agent.LoginReponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoginReponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoginReponse::ArenaDtor(void* object) {
  LoginReponse* _this = reinterpret_cast< LoginReponse* >(object);
  (void)_this;
}
void LoginReponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoginReponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoginReponse& LoginReponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoginReponse_Agent_2eproto.base);
  return *internal_default_instance();
}


void LoginReponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Agent.LoginReponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ttl_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginReponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // fixed32 ttl = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          ttl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginReponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Agent.LoginReponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes msg = 1;
  if (this->msg().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_msg(), target);
  }

  // fixed32 ttl = 2;
  if (this->ttl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(2, this->_internal_ttl(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Agent.LoginReponse)
  return target;
}

size_t LoginReponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Agent.LoginReponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes msg = 1;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_msg());
  }

  // fixed32 ttl = 2;
  if (this->ttl() != 0) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginReponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Agent.LoginReponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginReponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoginReponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Agent.LoginReponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Agent.LoginReponse)
    MergeFrom(*source);
  }
}

void LoginReponse::MergeFrom(const LoginReponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Agent.LoginReponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {
    _internal_set_msg(from._internal_msg());
  }
  if (from.ttl() != 0) {
    _internal_set_ttl(from._internal_ttl());
  }
}

void LoginReponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Agent.LoginReponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginReponse::CopyFrom(const LoginReponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Agent.LoginReponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginReponse::IsInitialized() const {
  return true;
}

void LoginReponse::InternalSwap(LoginReponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ttl_, other->ttl_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginReponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NodeInfo::InitAsDefaultInstance() {
}
class NodeInfo::_Internal {
 public:
};

NodeInfo::NodeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Agent.NodeInfo)
}
NodeInfo::NodeInfo(const NodeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  ::memcpy(&cid_, &from.cid_,
    static_cast<size_t>(reinterpret_cast<char*>(&net_) -
    reinterpret_cast<char*>(&cid_)) + sizeof(net_));
  // @@protoc_insertion_point(copy_constructor:Agent.NodeInfo)
}

void NodeInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NodeInfo_Agent_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&cid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&net_) -
      reinterpret_cast<char*>(&cid_)) + sizeof(net_));
}

NodeInfo::~NodeInfo() {
  // @@protoc_insertion_point(destructor:Agent.NodeInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NodeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NodeInfo::ArenaDtor(void* object) {
  NodeInfo* _this = reinterpret_cast< NodeInfo* >(object);
  (void)_this;
}
void NodeInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeInfo& NodeInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NodeInfo_Agent_2eproto.base);
  return *internal_default_instance();
}


void NodeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Agent.NodeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&cid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&net_) -
      reinterpret_cast<char*>(&cid_)) + sizeof(net_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Agent.AppId cid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_cid(static_cast<::Agent::AppId>(val));
        } else goto handle_unusual;
        continue;
      // .Agent.NodeStatus status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::Agent::NodeStatus>(val));
        } else goto handle_unusual;
        continue;
      // .Agent.NetType net = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_net(static_cast<::Agent::NetType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Agent.NodeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .Agent.AppId cid = 2;
  if (this->cid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_cid(), target);
  }

  // .Agent.NodeStatus status = 3;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_status(), target);
  }

  // .Agent.NetType net = 4;
  if (this->net() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_net(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Agent.NodeInfo)
  return target;
}

size_t NodeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Agent.NodeInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // .Agent.AppId cid = 2;
  if (this->cid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_cid());
  }

  // .Agent.NodeStatus status = 3;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // .Agent.NetType net = 4;
  if (this->net() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_net());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Agent.NodeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodeInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Agent.NodeInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Agent.NodeInfo)
    MergeFrom(*source);
  }
}

void NodeInfo::MergeFrom(const NodeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Agent.NodeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.cid() != 0) {
    _internal_set_cid(from._internal_cid());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.net() != 0) {
    _internal_set_net(from._internal_net());
  }
}

void NodeInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Agent.NodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeInfo::CopyFrom(const NodeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Agent.NodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeInfo::IsInitialized() const {
  return true;
}

void NodeInfo::InternalSwap(NodeInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NodeInfo, net_)
      + sizeof(NodeInfo::net_)
      - PROTOBUF_FIELD_OFFSET(NodeInfo, cid_)>(
          reinterpret_cast<char*>(&cid_),
          reinterpret_cast<char*>(&other->cid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HeartBeatRequest::InitAsDefaultInstance() {
}
class HeartBeatRequest::_Internal {
 public:
};

HeartBeatRequest::HeartBeatRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Agent.HeartBeatRequest)
}
HeartBeatRequest::HeartBeatRequest(const HeartBeatRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  cid_ = from.cid_;
  // @@protoc_insertion_point(copy_constructor:Agent.HeartBeatRequest)
}

void HeartBeatRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HeartBeatRequest_Agent_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cid_ = 0;
}

HeartBeatRequest::~HeartBeatRequest() {
  // @@protoc_insertion_point(destructor:Agent.HeartBeatRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HeartBeatRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HeartBeatRequest::ArenaDtor(void* object) {
  HeartBeatRequest* _this = reinterpret_cast< HeartBeatRequest* >(object);
  (void)_this;
}
void HeartBeatRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HeartBeatRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HeartBeatRequest& HeartBeatRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HeartBeatRequest_Agent_2eproto.base);
  return *internal_default_instance();
}


void HeartBeatRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Agent.HeartBeatRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeartBeatRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Agent.AppId cid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_cid(static_cast<::Agent::AppId>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HeartBeatRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Agent.HeartBeatRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .Agent.AppId cid = 2;
  if (this->cid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_cid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Agent.HeartBeatRequest)
  return target;
}

size_t HeartBeatRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Agent.HeartBeatRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // .Agent.AppId cid = 2;
  if (this->cid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_cid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeartBeatRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Agent.HeartBeatRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const HeartBeatRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HeartBeatRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Agent.HeartBeatRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Agent.HeartBeatRequest)
    MergeFrom(*source);
  }
}

void HeartBeatRequest::MergeFrom(const HeartBeatRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Agent.HeartBeatRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.cid() != 0) {
    _internal_set_cid(from._internal_cid());
  }
}

void HeartBeatRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Agent.HeartBeatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartBeatRequest::CopyFrom(const HeartBeatRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Agent.HeartBeatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartBeatRequest::IsInitialized() const {
  return true;
}

void HeartBeatRequest::InternalSwap(HeartBeatRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(cid_, other->cid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HeartBeatRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HeartBeatReponse::InitAsDefaultInstance() {
}
class HeartBeatReponse::_Internal {
 public:
};

HeartBeatReponse::HeartBeatReponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  nodes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Agent.HeartBeatReponse)
}
HeartBeatReponse::HeartBeatReponse(const HeartBeatReponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      nodes_(from.nodes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Agent.HeartBeatReponse)
}

void HeartBeatReponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HeartBeatReponse_Agent_2eproto.base);
}

HeartBeatReponse::~HeartBeatReponse() {
  // @@protoc_insertion_point(destructor:Agent.HeartBeatReponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HeartBeatReponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HeartBeatReponse::ArenaDtor(void* object) {
  HeartBeatReponse* _this = reinterpret_cast< HeartBeatReponse* >(object);
  (void)_this;
}
void HeartBeatReponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HeartBeatReponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HeartBeatReponse& HeartBeatReponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HeartBeatReponse_Agent_2eproto.base);
  return *internal_default_instance();
}


void HeartBeatReponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Agent.HeartBeatReponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeartBeatReponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Agent.NodeInfo nodes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HeartBeatReponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Agent.HeartBeatReponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Agent.NodeInfo nodes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_nodes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_nodes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Agent.HeartBeatReponse)
  return target;
}

size_t HeartBeatReponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Agent.HeartBeatReponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Agent.NodeInfo nodes = 1;
  total_size += 1UL * this->_internal_nodes_size();
  for (const auto& msg : this->nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeartBeatReponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Agent.HeartBeatReponse)
  GOOGLE_DCHECK_NE(&from, this);
  const HeartBeatReponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HeartBeatReponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Agent.HeartBeatReponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Agent.HeartBeatReponse)
    MergeFrom(*source);
  }
}

void HeartBeatReponse::MergeFrom(const HeartBeatReponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Agent.HeartBeatReponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nodes_.MergeFrom(from.nodes_);
}

void HeartBeatReponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Agent.HeartBeatReponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartBeatReponse::CopyFrom(const HeartBeatReponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Agent.HeartBeatReponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartBeatReponse::IsInitialized() const {
  return true;
}

void HeartBeatReponse::InternalSwap(HeartBeatReponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  nodes_.InternalSwap(&other->nodes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HeartBeatReponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AgentPdu::InitAsDefaultInstance() {
  ::Agent::_AgentPdu_default_instance_._instance.get_mutable()->bhs_ = const_cast< ::Agent::AgentBhs*>(
      ::Agent::AgentBhs::internal_default_instance());
  ::Agent::_AgentPdu_default_instance_._instance.get_mutable()->reqlogin_ = const_cast< ::Agent::LoginRequest*>(
      ::Agent::LoginRequest::internal_default_instance());
  ::Agent::_AgentPdu_default_instance_._instance.get_mutable()->rsplogin_ = const_cast< ::Agent::LoginReponse*>(
      ::Agent::LoginReponse::internal_default_instance());
  ::Agent::_AgentPdu_default_instance_._instance.get_mutable()->reqhb_ = const_cast< ::Agent::HeartBeatRequest*>(
      ::Agent::HeartBeatRequest::internal_default_instance());
  ::Agent::_AgentPdu_default_instance_._instance.get_mutable()->rsphb_ = const_cast< ::Agent::HeartBeatReponse*>(
      ::Agent::HeartBeatReponse::internal_default_instance());
}
class AgentPdu::_Internal {
 public:
  static const ::Agent::AgentBhs& bhs(const AgentPdu* msg);
  static const ::Agent::LoginRequest& reqlogin(const AgentPdu* msg);
  static const ::Agent::LoginReponse& rsplogin(const AgentPdu* msg);
  static const ::Agent::HeartBeatRequest& reqhb(const AgentPdu* msg);
  static const ::Agent::HeartBeatReponse& rsphb(const AgentPdu* msg);
};

const ::Agent::AgentBhs&
AgentPdu::_Internal::bhs(const AgentPdu* msg) {
  return *msg->bhs_;
}
const ::Agent::LoginRequest&
AgentPdu::_Internal::reqlogin(const AgentPdu* msg) {
  return *msg->reqlogin_;
}
const ::Agent::LoginReponse&
AgentPdu::_Internal::rsplogin(const AgentPdu* msg) {
  return *msg->rsplogin_;
}
const ::Agent::HeartBeatRequest&
AgentPdu::_Internal::reqhb(const AgentPdu* msg) {
  return *msg->reqhb_;
}
const ::Agent::HeartBeatReponse&
AgentPdu::_Internal::rsphb(const AgentPdu* msg) {
  return *msg->rsphb_;
}
AgentPdu::AgentPdu(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Agent.AgentPdu)
}
AgentPdu::AgentPdu(const AgentPdu& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_bhs()) {
    bhs_ = new ::Agent::AgentBhs(*from.bhs_);
  } else {
    bhs_ = nullptr;
  }
  if (from._internal_has_reqlogin()) {
    reqlogin_ = new ::Agent::LoginRequest(*from.reqlogin_);
  } else {
    reqlogin_ = nullptr;
  }
  if (from._internal_has_rsplogin()) {
    rsplogin_ = new ::Agent::LoginReponse(*from.rsplogin_);
  } else {
    rsplogin_ = nullptr;
  }
  if (from._internal_has_reqhb()) {
    reqhb_ = new ::Agent::HeartBeatRequest(*from.reqhb_);
  } else {
    reqhb_ = nullptr;
  }
  if (from._internal_has_rsphb()) {
    rsphb_ = new ::Agent::HeartBeatReponse(*from.rsphb_);
  } else {
    rsphb_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Agent.AgentPdu)
}

void AgentPdu::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AgentPdu_Agent_2eproto.base);
  ::memset(&bhs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rsphb_) -
      reinterpret_cast<char*>(&bhs_)) + sizeof(rsphb_));
}

AgentPdu::~AgentPdu() {
  // @@protoc_insertion_point(destructor:Agent.AgentPdu)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AgentPdu::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete bhs_;
  if (this != internal_default_instance()) delete reqlogin_;
  if (this != internal_default_instance()) delete rsplogin_;
  if (this != internal_default_instance()) delete reqhb_;
  if (this != internal_default_instance()) delete rsphb_;
}

void AgentPdu::ArenaDtor(void* object) {
  AgentPdu* _this = reinterpret_cast< AgentPdu* >(object);
  (void)_this;
}
void AgentPdu::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AgentPdu::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AgentPdu& AgentPdu::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AgentPdu_Agent_2eproto.base);
  return *internal_default_instance();
}


void AgentPdu::Clear() {
// @@protoc_insertion_point(message_clear_start:Agent.AgentPdu)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && bhs_ != nullptr) {
    delete bhs_;
  }
  bhs_ = nullptr;
  if (GetArena() == nullptr && reqlogin_ != nullptr) {
    delete reqlogin_;
  }
  reqlogin_ = nullptr;
  if (GetArena() == nullptr && rsplogin_ != nullptr) {
    delete rsplogin_;
  }
  rsplogin_ = nullptr;
  if (GetArena() == nullptr && reqhb_ != nullptr) {
    delete reqhb_;
  }
  reqhb_ = nullptr;
  if (GetArena() == nullptr && rsphb_ != nullptr) {
    delete rsphb_;
  }
  rsphb_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AgentPdu::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Agent.AgentBhs bhs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_bhs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Agent.LoginRequest reqLogin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_reqlogin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Agent.LoginReponse rspLogin = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rsplogin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Agent.HeartBeatRequest reqHb = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_reqhb(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Agent.HeartBeatReponse rspHb = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_rsphb(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AgentPdu::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Agent.AgentPdu)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Agent.AgentBhs bhs = 1;
  if (this->has_bhs()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::bhs(this), target, stream);
  }

  // .Agent.LoginRequest reqLogin = 2;
  if (this->has_reqlogin()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::reqlogin(this), target, stream);
  }

  // .Agent.LoginReponse rspLogin = 3;
  if (this->has_rsplogin()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::rsplogin(this), target, stream);
  }

  // .Agent.HeartBeatRequest reqHb = 4;
  if (this->has_reqhb()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::reqhb(this), target, stream);
  }

  // .Agent.HeartBeatReponse rspHb = 5;
  if (this->has_rsphb()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::rsphb(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Agent.AgentPdu)
  return target;
}

size_t AgentPdu::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Agent.AgentPdu)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Agent.AgentBhs bhs = 1;
  if (this->has_bhs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bhs_);
  }

  // .Agent.LoginRequest reqLogin = 2;
  if (this->has_reqlogin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reqlogin_);
  }

  // .Agent.LoginReponse rspLogin = 3;
  if (this->has_rsplogin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rsplogin_);
  }

  // .Agent.HeartBeatRequest reqHb = 4;
  if (this->has_reqhb()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reqhb_);
  }

  // .Agent.HeartBeatReponse rspHb = 5;
  if (this->has_rsphb()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rsphb_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AgentPdu::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Agent.AgentPdu)
  GOOGLE_DCHECK_NE(&from, this);
  const AgentPdu* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AgentPdu>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Agent.AgentPdu)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Agent.AgentPdu)
    MergeFrom(*source);
  }
}

void AgentPdu::MergeFrom(const AgentPdu& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Agent.AgentPdu)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_bhs()) {
    _internal_mutable_bhs()->::Agent::AgentBhs::MergeFrom(from._internal_bhs());
  }
  if (from.has_reqlogin()) {
    _internal_mutable_reqlogin()->::Agent::LoginRequest::MergeFrom(from._internal_reqlogin());
  }
  if (from.has_rsplogin()) {
    _internal_mutable_rsplogin()->::Agent::LoginReponse::MergeFrom(from._internal_rsplogin());
  }
  if (from.has_reqhb()) {
    _internal_mutable_reqhb()->::Agent::HeartBeatRequest::MergeFrom(from._internal_reqhb());
  }
  if (from.has_rsphb()) {
    _internal_mutable_rsphb()->::Agent::HeartBeatReponse::MergeFrom(from._internal_rsphb());
  }
}

void AgentPdu::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Agent.AgentPdu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgentPdu::CopyFrom(const AgentPdu& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Agent.AgentPdu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentPdu::IsInitialized() const {
  return true;
}

void AgentPdu::InternalSwap(AgentPdu* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AgentPdu, rsphb_)
      + sizeof(AgentPdu::rsphb_)
      - PROTOBUF_FIELD_OFFSET(AgentPdu, bhs_)>(
          reinterpret_cast<char*>(&bhs_),
          reinterpret_cast<char*>(&other->bhs_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AgentPdu::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Agent
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Agent::AgentBhs* Arena::CreateMaybeMessage< ::Agent::AgentBhs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Agent::AgentBhs >(arena);
}
template<> PROTOBUF_NOINLINE ::Agent::Chap* Arena::CreateMaybeMessage< ::Agent::Chap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Agent::Chap >(arena);
}
template<> PROTOBUF_NOINLINE ::Agent::LoginRequest* Arena::CreateMaybeMessage< ::Agent::LoginRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Agent::LoginRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Agent::LoginReponse* Arena::CreateMaybeMessage< ::Agent::LoginReponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Agent::LoginReponse >(arena);
}
template<> PROTOBUF_NOINLINE ::Agent::NodeInfo* Arena::CreateMaybeMessage< ::Agent::NodeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Agent::NodeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Agent::HeartBeatRequest* Arena::CreateMaybeMessage< ::Agent::HeartBeatRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Agent::HeartBeatRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Agent::HeartBeatReponse* Arena::CreateMaybeMessage< ::Agent::HeartBeatReponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Agent::HeartBeatReponse >(arena);
}
template<> PROTOBUF_NOINLINE ::Agent::AgentPdu* Arena::CreateMaybeMessage< ::Agent::AgentPdu >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Agent::AgentPdu >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
