// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Agent.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Agent_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Agent_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Agent_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Agent_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Agent_2eproto;
namespace Agent {
class AgentBhs;
class AgentBhsDefaultTypeInternal;
extern AgentBhsDefaultTypeInternal _AgentBhs_default_instance_;
class Friend;
class FriendDefaultTypeInternal;
extern FriendDefaultTypeInternal _Friend_default_instance_;
class FriendNotification;
class FriendNotificationDefaultTypeInternal;
extern FriendNotificationDefaultTypeInternal _FriendNotification_default_instance_;
class GetFriendsResponse;
class GetFriendsResponseDefaultTypeInternal;
extern GetFriendsResponseDefaultTypeInternal _GetFriendsResponse_default_instance_;
class LoginReponse;
class LoginReponseDefaultTypeInternal;
extern LoginReponseDefaultTypeInternal _LoginReponse_default_instance_;
class LoginRequest;
class LoginRequestDefaultTypeInternal;
extern LoginRequestDefaultTypeInternal _LoginRequest_default_instance_;
class MessageNotification;
class MessageNotificationDefaultTypeInternal;
extern MessageNotificationDefaultTypeInternal _MessageNotification_default_instance_;
class SendMessageRequest;
class SendMessageRequestDefaultTypeInternal;
extern SendMessageRequestDefaultTypeInternal _SendMessageRequest_default_instance_;
}  // namespace Agent
PROTOBUF_NAMESPACE_OPEN
template<> ::Agent::AgentBhs* Arena::CreateMaybeMessage<::Agent::AgentBhs>(Arena*);
template<> ::Agent::Friend* Arena::CreateMaybeMessage<::Agent::Friend>(Arena*);
template<> ::Agent::FriendNotification* Arena::CreateMaybeMessage<::Agent::FriendNotification>(Arena*);
template<> ::Agent::GetFriendsResponse* Arena::CreateMaybeMessage<::Agent::GetFriendsResponse>(Arena*);
template<> ::Agent::LoginReponse* Arena::CreateMaybeMessage<::Agent::LoginReponse>(Arena*);
template<> ::Agent::LoginRequest* Arena::CreateMaybeMessage<::Agent::LoginRequest>(Arena*);
template<> ::Agent::MessageNotification* Arena::CreateMaybeMessage<::Agent::MessageNotification>(Arena*);
template<> ::Agent::SendMessageRequest* Arena::CreateMaybeMessage<::Agent::SendMessageRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Agent {

enum AgentErrno : int {
  AGENT_E_EXEC_SUCESS = 0,
  AGENT_E_EXEC_FAILURE = 1,
  AGENT_E_LOGIN_SUCESS = 2,
  AGENT_E_LOGIN_FAILURE = 3,
  AGENT_E_LOGIN_UNAUTH = 4,
  AGENT_E_PEER_OFFLINE = 5,
  AGENT_E_SEND_TIMEROUT = 6,
  AGENT_E_RECV_TIMEROUT = 7,
  AGENT_E_CANNOT_IN_LOOP = 8,
  AGENT_E_AGENT_NOT_START = 9,
  AGENT_E_ENCODE_FAILURE = 10,
  AGENT_E_DECODE_FAILURE = 11,
  AgentErrno_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AgentErrno_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AgentErrno_IsValid(int value);
constexpr AgentErrno AgentErrno_MIN = AGENT_E_EXEC_SUCESS;
constexpr AgentErrno AgentErrno_MAX = AGENT_E_DECODE_FAILURE;
constexpr int AgentErrno_ARRAYSIZE = AgentErrno_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AgentErrno_descriptor();
template<typename T>
inline const std::string& AgentErrno_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AgentErrno>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AgentErrno_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AgentErrno_descriptor(), enum_t_value);
}
inline bool AgentErrno_Parse(
    const std::string& name, AgentErrno* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AgentErrno>(
    AgentErrno_descriptor(), name, value);
}
enum AgentCommand : int {
  AGENT_REQUEST_START = 0,
  AGENT_LOGIN_REQUEST = 1,
  AGENT_LOGIN_RESPNCE = 2,
  AGENT_LOGOUT_REQUEST = 3,
  AGENT_LOGOUT_RESPONCE = 4,
  AGENT_NOPIN_REQUEST = 5,
  AGENT_NOPIN_RESPONCE = 6,
  AGENT_DEBUG_ON_REQUEST = 7,
  AGENT_DEBUG_OFF_REQUEST = 8,
  AGENT_GET_FRIENDS_REQUEST = 9,
  AGENT_GET_FRIENDS_RESPONCE = 10,
  AGENT_SEND_MSG_REQUEST = 11,
  AGENT_SEND_MSG_RESPONCE = 12,
  AGENT_FRIENDS_NOTIFY = 13,
  AGENT_MESSAGE_NOTIFY = 14,
  AGENT_READ_REQUEST = 15,
  AGENT_WRITE_REQUEST = 16,
  AGENT_READ_MOBILE_PARAM = 17,
  AGENT_WRITE_MOBILE_PARAM = 18,
  AgentCommand_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AgentCommand_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AgentCommand_IsValid(int value);
constexpr AgentCommand AgentCommand_MIN = AGENT_REQUEST_START;
constexpr AgentCommand AgentCommand_MAX = AGENT_WRITE_MOBILE_PARAM;
constexpr int AgentCommand_ARRAYSIZE = AgentCommand_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AgentCommand_descriptor();
template<typename T>
inline const std::string& AgentCommand_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AgentCommand>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AgentCommand_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AgentCommand_descriptor(), enum_t_value);
}
inline bool AgentCommand_Parse(
    const std::string& name, AgentCommand* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AgentCommand>(
    AgentCommand_descriptor(), name, value);
}
enum AgentAppId : int {
  APP_ONESELF = 0,
  APP_AGENT = 1,
  APP_GUARD = 2,
  APP_MOBILE = 3,
  APP_DLNA = 4,
  APP_UPNP = 5,
  APP_DDNS = 6,
  AgentAppId_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AgentAppId_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AgentAppId_IsValid(int value);
constexpr AgentAppId AgentAppId_MIN = APP_ONESELF;
constexpr AgentAppId AgentAppId_MAX = APP_DDNS;
constexpr int AgentAppId_ARRAYSIZE = AgentAppId_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AgentAppId_descriptor();
template<typename T>
inline const std::string& AgentAppId_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AgentAppId>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AgentAppId_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AgentAppId_descriptor(), enum_t_value);
}
inline bool AgentAppId_Parse(
    const std::string& name, AgentAppId* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AgentAppId>(
    AgentAppId_descriptor(), name, value);
}
enum AgentPacket : int {
  AGENT_PACKET_BINNARY = 0,
  AGENT_PACKET_JSON = 1,
  AGENT_PACKET_PROTOBUF = 2,
  AGENT_PACKET_BUTT = 3,
  AgentPacket_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AgentPacket_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AgentPacket_IsValid(int value);
constexpr AgentPacket AgentPacket_MIN = AGENT_PACKET_BINNARY;
constexpr AgentPacket AgentPacket_MAX = AGENT_PACKET_BUTT;
constexpr int AgentPacket_ARRAYSIZE = AgentPacket_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AgentPacket_descriptor();
template<typename T>
inline const std::string& AgentPacket_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AgentPacket>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AgentPacket_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AgentPacket_descriptor(), enum_t_value);
}
inline bool AgentPacket_Parse(
    const std::string& name, AgentPacket* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AgentPacket>(
    AgentPacket_descriptor(), name, value);
}
enum AgentOpcode : int {
  AGENT_REQUEST = 0,
  AGENT_RESPONCE = 1,
  AgentOpcode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AgentOpcode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AgentOpcode_IsValid(int value);
constexpr AgentOpcode AgentOpcode_MIN = AGENT_REQUEST;
constexpr AgentOpcode AgentOpcode_MAX = AGENT_RESPONCE;
constexpr int AgentOpcode_ARRAYSIZE = AgentOpcode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AgentOpcode_descriptor();
template<typename T>
inline const std::string& AgentOpcode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AgentOpcode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AgentOpcode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AgentOpcode_descriptor(), enum_t_value);
}
inline bool AgentOpcode_Parse(
    const std::string& name, AgentOpcode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AgentOpcode>(
    AgentOpcode_descriptor(), name, value);
}
enum FriendStatus : int {
  IDLE = 0,
  BUSY = 1,
  FriendStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  FriendStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool FriendStatus_IsValid(int value);
constexpr FriendStatus FriendStatus_MIN = IDLE;
constexpr FriendStatus FriendStatus_MAX = BUSY;
constexpr int FriendStatus_ARRAYSIZE = FriendStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FriendStatus_descriptor();
template<typename T>
inline const std::string& FriendStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FriendStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FriendStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FriendStatus_descriptor(), enum_t_value);
}
inline bool FriendStatus_Parse(
    const std::string& name, FriendStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FriendStatus>(
    FriendStatus_descriptor(), name, value);
}
// ===================================================================

class AgentBhs :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Agent.AgentBhs) */ {
 public:
  AgentBhs();
  virtual ~AgentBhs();

  AgentBhs(const AgentBhs& from);
  AgentBhs(AgentBhs&& from) noexcept
    : AgentBhs() {
    *this = ::std::move(from);
  }

  inline AgentBhs& operator=(const AgentBhs& from) {
    CopyFrom(from);
    return *this;
  }
  inline AgentBhs& operator=(AgentBhs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AgentBhs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AgentBhs* internal_default_instance() {
    return reinterpret_cast<const AgentBhs*>(
               &_AgentBhs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AgentBhs& a, AgentBhs& b) {
    a.Swap(&b);
  }
  inline void Swap(AgentBhs* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AgentBhs* New() const final {
    return CreateMaybeMessage<AgentBhs>(nullptr);
  }

  AgentBhs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AgentBhs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AgentBhs& from);
  void MergeFrom(const AgentBhs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AgentBhs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Agent.AgentBhs";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Agent_2eproto);
    return ::descriptor_table_Agent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerifyFieldNumber = 1,
    kRouterFieldNumber = 2,
    kCommandFieldNumber = 3,
  };
  // fixed64 verify = 1;
  void clear_verify();
  ::PROTOBUF_NAMESPACE_ID::uint64 verify() const;
  void set_verify(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_verify() const;
  void _internal_set_verify(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // fixed64 router = 2;
  void clear_router();
  ::PROTOBUF_NAMESPACE_ID::uint64 router() const;
  void set_router(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_router() const;
  void _internal_set_router(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // fixed64 command = 3;
  void clear_command();
  ::PROTOBUF_NAMESPACE_ID::uint64 command() const;
  void set_command(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_command() const;
  void _internal_set_command(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Agent.AgentBhs)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 verify_;
  ::PROTOBUF_NAMESPACE_ID::uint64 router_;
  ::PROTOBUF_NAMESPACE_ID::uint64 command_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Agent_2eproto;
};
// -------------------------------------------------------------------

class LoginRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Agent.LoginRequest) */ {
 public:
  LoginRequest();
  virtual ~LoginRequest();

  LoginRequest(const LoginRequest& from);
  LoginRequest(LoginRequest&& from) noexcept
    : LoginRequest() {
    *this = ::std::move(from);
  }

  inline LoginRequest& operator=(const LoginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginRequest& operator=(LoginRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginRequest* internal_default_instance() {
    return reinterpret_cast<const LoginRequest*>(
               &_LoginRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LoginRequest& a, LoginRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginRequest* New() const final {
    return CreateMaybeMessage<LoginRequest>(nullptr);
  }

  LoginRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginRequest& from);
  void MergeFrom(const LoginRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Agent.LoginRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Agent_2eproto);
    return ::descriptor_table_Agent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kHashFieldNumber = 2,
    kChapFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 hash = 2;
  void clear_hash();
  ::PROTOBUF_NAMESPACE_ID::uint32 hash() const;
  void set_hash(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_hash() const;
  void _internal_set_hash(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 chap = 3;
  void clear_chap();
  ::PROTOBUF_NAMESPACE_ID::uint32 chap() const;
  void set_chap(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_chap() const;
  void _internal_set_chap(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Agent.LoginRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hash_;
  ::PROTOBUF_NAMESPACE_ID::uint32 chap_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Agent_2eproto;
};
// -------------------------------------------------------------------

class LoginReponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Agent.LoginReponse) */ {
 public:
  LoginReponse();
  virtual ~LoginReponse();

  LoginReponse(const LoginReponse& from);
  LoginReponse(LoginReponse&& from) noexcept
    : LoginReponse() {
    *this = ::std::move(from);
  }

  inline LoginReponse& operator=(const LoginReponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginReponse& operator=(LoginReponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginReponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginReponse* internal_default_instance() {
    return reinterpret_cast<const LoginReponse*>(
               &_LoginReponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LoginReponse& a, LoginReponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginReponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginReponse* New() const final {
    return CreateMaybeMessage<LoginReponse>(nullptr);
  }

  LoginReponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginReponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginReponse& from);
  void MergeFrom(const LoginReponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginReponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Agent.LoginReponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Agent_2eproto);
    return ::descriptor_table_Agent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRetMsgFieldNumber = 2,
    kRetCodeFieldNumber = 1,
    kTtlFieldNumber = 3,
  };
  // bytes ret_msg = 2;
  void clear_ret_msg();
  const std::string& ret_msg() const;
  void set_ret_msg(const std::string& value);
  void set_ret_msg(std::string&& value);
  void set_ret_msg(const char* value);
  void set_ret_msg(const void* value, size_t size);
  std::string* mutable_ret_msg();
  std::string* release_ret_msg();
  void set_allocated_ret_msg(std::string* ret_msg);
  private:
  const std::string& _internal_ret_msg() const;
  void _internal_set_ret_msg(const std::string& value);
  std::string* _internal_mutable_ret_msg();
  public:

  // .Agent.AgentErrno ret_code = 1;
  void clear_ret_code();
  ::Agent::AgentErrno ret_code() const;
  void set_ret_code(::Agent::AgentErrno value);
  private:
  ::Agent::AgentErrno _internal_ret_code() const;
  void _internal_set_ret_code(::Agent::AgentErrno value);
  public:

  // fixed32 ttl = 3;
  void clear_ttl();
  ::PROTOBUF_NAMESPACE_ID::uint32 ttl() const;
  void set_ttl(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ttl() const;
  void _internal_set_ttl(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Agent.LoginReponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ret_msg_;
  int ret_code_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ttl_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Agent_2eproto;
};
// -------------------------------------------------------------------

class Friend :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Agent.Friend) */ {
 public:
  Friend();
  virtual ~Friend();

  Friend(const Friend& from);
  Friend(Friend&& from) noexcept
    : Friend() {
    *this = ::std::move(from);
  }

  inline Friend& operator=(const Friend& from) {
    CopyFrom(from);
    return *this;
  }
  inline Friend& operator=(Friend&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Friend& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Friend* internal_default_instance() {
    return reinterpret_cast<const Friend*>(
               &_Friend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Friend& a, Friend& b) {
    a.Swap(&b);
  }
  inline void Swap(Friend* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Friend* New() const final {
    return CreateMaybeMessage<Friend>(nullptr);
  }

  Friend* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Friend>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Friend& from);
  void MergeFrom(const Friend& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Friend* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Agent.Friend";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Agent_2eproto);
    return ::descriptor_table_Agent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kOnlineFieldNumber = 2,
    kStatusFieldNumber = 3,
  };
  // bytes name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bool online = 2;
  void clear_online();
  bool online() const;
  void set_online(bool value);
  private:
  bool _internal_online() const;
  void _internal_set_online(bool value);
  public:

  // .Agent.FriendStatus status = 3;
  void clear_status();
  ::Agent::FriendStatus status() const;
  void set_status(::Agent::FriendStatus value);
  private:
  ::Agent::FriendStatus _internal_status() const;
  void _internal_set_status(::Agent::FriendStatus value);
  public:

  // @@protoc_insertion_point(class_scope:Agent.Friend)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  bool online_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Agent_2eproto;
};
// -------------------------------------------------------------------

class GetFriendsResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Agent.GetFriendsResponse) */ {
 public:
  GetFriendsResponse();
  virtual ~GetFriendsResponse();

  GetFriendsResponse(const GetFriendsResponse& from);
  GetFriendsResponse(GetFriendsResponse&& from) noexcept
    : GetFriendsResponse() {
    *this = ::std::move(from);
  }

  inline GetFriendsResponse& operator=(const GetFriendsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFriendsResponse& operator=(GetFriendsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetFriendsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetFriendsResponse* internal_default_instance() {
    return reinterpret_cast<const GetFriendsResponse*>(
               &_GetFriendsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetFriendsResponse& a, GetFriendsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFriendsResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetFriendsResponse* New() const final {
    return CreateMaybeMessage<GetFriendsResponse>(nullptr);
  }

  GetFriendsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetFriendsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetFriendsResponse& from);
  void MergeFrom(const GetFriendsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFriendsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Agent.GetFriendsResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Agent_2eproto);
    return ::descriptor_table_Agent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFriendsFieldNumber = 1,
  };
  // repeated .Agent.Friend friends = 1;
  int friends_size() const;
  private:
  int _internal_friends_size() const;
  public:
  void clear_friends();
  ::Agent::Friend* mutable_friends(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Agent::Friend >*
      mutable_friends();
  private:
  const ::Agent::Friend& _internal_friends(int index) const;
  ::Agent::Friend* _internal_add_friends();
  public:
  const ::Agent::Friend& friends(int index) const;
  ::Agent::Friend* add_friends();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Agent::Friend >&
      friends() const;

  // @@protoc_insertion_point(class_scope:Agent.GetFriendsResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Agent::Friend > friends_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Agent_2eproto;
};
// -------------------------------------------------------------------

class SendMessageRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Agent.SendMessageRequest) */ {
 public:
  SendMessageRequest();
  virtual ~SendMessageRequest();

  SendMessageRequest(const SendMessageRequest& from);
  SendMessageRequest(SendMessageRequest&& from) noexcept
    : SendMessageRequest() {
    *this = ::std::move(from);
  }

  inline SendMessageRequest& operator=(const SendMessageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendMessageRequest& operator=(SendMessageRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendMessageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendMessageRequest* internal_default_instance() {
    return reinterpret_cast<const SendMessageRequest*>(
               &_SendMessageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SendMessageRequest& a, SendMessageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SendMessageRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendMessageRequest* New() const final {
    return CreateMaybeMessage<SendMessageRequest>(nullptr);
  }

  SendMessageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendMessageRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendMessageRequest& from);
  void MergeFrom(const SendMessageRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendMessageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Agent.SendMessageRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Agent_2eproto);
    return ::descriptor_table_Agent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReceiverFieldNumber = 1,
    kTextFieldNumber = 2,
  };
  // bytes receiver = 1;
  void clear_receiver();
  const std::string& receiver() const;
  void set_receiver(const std::string& value);
  void set_receiver(std::string&& value);
  void set_receiver(const char* value);
  void set_receiver(const void* value, size_t size);
  std::string* mutable_receiver();
  std::string* release_receiver();
  void set_allocated_receiver(std::string* receiver);
  private:
  const std::string& _internal_receiver() const;
  void _internal_set_receiver(const std::string& value);
  std::string* _internal_mutable_receiver();
  public:

  // bytes text = 2;
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const void* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // @@protoc_insertion_point(class_scope:Agent.SendMessageRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr receiver_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Agent_2eproto;
};
// -------------------------------------------------------------------

class FriendNotification :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Agent.FriendNotification) */ {
 public:
  FriendNotification();
  virtual ~FriendNotification();

  FriendNotification(const FriendNotification& from);
  FriendNotification(FriendNotification&& from) noexcept
    : FriendNotification() {
    *this = ::std::move(from);
  }

  inline FriendNotification& operator=(const FriendNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendNotification& operator=(FriendNotification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FriendNotification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FriendNotification* internal_default_instance() {
    return reinterpret_cast<const FriendNotification*>(
               &_FriendNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(FriendNotification& a, FriendNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendNotification* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FriendNotification* New() const final {
    return CreateMaybeMessage<FriendNotification>(nullptr);
  }

  FriendNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FriendNotification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FriendNotification& from);
  void MergeFrom(const FriendNotification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendNotification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Agent.FriendNotification";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Agent_2eproto);
    return ::descriptor_table_Agent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kOnlineFieldNumber = 2,
  };
  // bytes name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bool online = 2;
  void clear_online();
  bool online() const;
  void set_online(bool value);
  private:
  bool _internal_online() const;
  void _internal_set_online(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Agent.FriendNotification)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  bool online_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Agent_2eproto;
};
// -------------------------------------------------------------------

class MessageNotification :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Agent.MessageNotification) */ {
 public:
  MessageNotification();
  virtual ~MessageNotification();

  MessageNotification(const MessageNotification& from);
  MessageNotification(MessageNotification&& from) noexcept
    : MessageNotification() {
    *this = ::std::move(from);
  }

  inline MessageNotification& operator=(const MessageNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageNotification& operator=(MessageNotification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageNotification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageNotification* internal_default_instance() {
    return reinterpret_cast<const MessageNotification*>(
               &_MessageNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MessageNotification& a, MessageNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageNotification* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageNotification* New() const final {
    return CreateMaybeMessage<MessageNotification>(nullptr);
  }

  MessageNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageNotification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageNotification& from);
  void MergeFrom(const MessageNotification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageNotification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Agent.MessageNotification";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Agent_2eproto);
    return ::descriptor_table_Agent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSenderFieldNumber = 1,
    kTextFieldNumber = 2,
    kTimestampFieldNumber = 3,
  };
  // bytes sender = 1;
  void clear_sender();
  const std::string& sender() const;
  void set_sender(const std::string& value);
  void set_sender(std::string&& value);
  void set_sender(const char* value);
  void set_sender(const void* value, size_t size);
  std::string* mutable_sender();
  std::string* release_sender();
  void set_allocated_sender(std::string* sender);
  private:
  const std::string& _internal_sender() const;
  void _internal_set_sender(const std::string& value);
  std::string* _internal_mutable_sender();
  public:

  // bytes text = 2;
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const void* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // string timestamp = 3;
  void clear_timestamp();
  const std::string& timestamp() const;
  void set_timestamp(const std::string& value);
  void set_timestamp(std::string&& value);
  void set_timestamp(const char* value);
  void set_timestamp(const char* value, size_t size);
  std::string* mutable_timestamp();
  std::string* release_timestamp();
  void set_allocated_timestamp(std::string* timestamp);
  private:
  const std::string& _internal_timestamp() const;
  void _internal_set_timestamp(const std::string& value);
  std::string* _internal_mutable_timestamp();
  public:

  // @@protoc_insertion_point(class_scope:Agent.MessageNotification)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Agent_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AgentBhs

// fixed64 verify = 1;
inline void AgentBhs::clear_verify() {
  verify_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AgentBhs::_internal_verify() const {
  return verify_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AgentBhs::verify() const {
  // @@protoc_insertion_point(field_get:Agent.AgentBhs.verify)
  return _internal_verify();
}
inline void AgentBhs::_internal_set_verify(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  verify_ = value;
}
inline void AgentBhs::set_verify(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_verify(value);
  // @@protoc_insertion_point(field_set:Agent.AgentBhs.verify)
}

// fixed64 router = 2;
inline void AgentBhs::clear_router() {
  router_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AgentBhs::_internal_router() const {
  return router_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AgentBhs::router() const {
  // @@protoc_insertion_point(field_get:Agent.AgentBhs.router)
  return _internal_router();
}
inline void AgentBhs::_internal_set_router(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  router_ = value;
}
inline void AgentBhs::set_router(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_router(value);
  // @@protoc_insertion_point(field_set:Agent.AgentBhs.router)
}

// fixed64 command = 3;
inline void AgentBhs::clear_command() {
  command_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AgentBhs::_internal_command() const {
  return command_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AgentBhs::command() const {
  // @@protoc_insertion_point(field_get:Agent.AgentBhs.command)
  return _internal_command();
}
inline void AgentBhs::_internal_set_command(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  command_ = value;
}
inline void AgentBhs::set_command(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:Agent.AgentBhs.command)
}

// -------------------------------------------------------------------

// LoginRequest

// string name = 1;
inline void LoginRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginRequest::name() const {
  // @@protoc_insertion_point(field_get:Agent.LoginRequest.name)
  return _internal_name();
}
inline void LoginRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Agent.LoginRequest.name)
}
inline std::string* LoginRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Agent.LoginRequest.name)
  return _internal_mutable_name();
}
inline const std::string& LoginRequest::_internal_name() const {
  return name_.GetNoArena();
}
inline void LoginRequest::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LoginRequest::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Agent.LoginRequest.name)
}
inline void LoginRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Agent.LoginRequest.name)
}
inline void LoginRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Agent.LoginRequest.name)
}
inline std::string* LoginRequest::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginRequest::release_name() {
  // @@protoc_insertion_point(field_release:Agent.LoginRequest.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Agent.LoginRequest.name)
}

// uint32 hash = 2;
inline void LoginRequest::clear_hash() {
  hash_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoginRequest::_internal_hash() const {
  return hash_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoginRequest::hash() const {
  // @@protoc_insertion_point(field_get:Agent.LoginRequest.hash)
  return _internal_hash();
}
inline void LoginRequest::_internal_set_hash(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  hash_ = value;
}
inline void LoginRequest::set_hash(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:Agent.LoginRequest.hash)
}

// uint32 chap = 3;
inline void LoginRequest::clear_chap() {
  chap_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoginRequest::_internal_chap() const {
  return chap_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoginRequest::chap() const {
  // @@protoc_insertion_point(field_get:Agent.LoginRequest.chap)
  return _internal_chap();
}
inline void LoginRequest::_internal_set_chap(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  chap_ = value;
}
inline void LoginRequest::set_chap(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_chap(value);
  // @@protoc_insertion_point(field_set:Agent.LoginRequest.chap)
}

// -------------------------------------------------------------------

// LoginReponse

// .Agent.AgentErrno ret_code = 1;
inline void LoginReponse::clear_ret_code() {
  ret_code_ = 0;
}
inline ::Agent::AgentErrno LoginReponse::_internal_ret_code() const {
  return static_cast< ::Agent::AgentErrno >(ret_code_);
}
inline ::Agent::AgentErrno LoginReponse::ret_code() const {
  // @@protoc_insertion_point(field_get:Agent.LoginReponse.ret_code)
  return _internal_ret_code();
}
inline void LoginReponse::_internal_set_ret_code(::Agent::AgentErrno value) {
  
  ret_code_ = value;
}
inline void LoginReponse::set_ret_code(::Agent::AgentErrno value) {
  _internal_set_ret_code(value);
  // @@protoc_insertion_point(field_set:Agent.LoginReponse.ret_code)
}

// bytes ret_msg = 2;
inline void LoginReponse::clear_ret_msg() {
  ret_msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginReponse::ret_msg() const {
  // @@protoc_insertion_point(field_get:Agent.LoginReponse.ret_msg)
  return _internal_ret_msg();
}
inline void LoginReponse::set_ret_msg(const std::string& value) {
  _internal_set_ret_msg(value);
  // @@protoc_insertion_point(field_set:Agent.LoginReponse.ret_msg)
}
inline std::string* LoginReponse::mutable_ret_msg() {
  // @@protoc_insertion_point(field_mutable:Agent.LoginReponse.ret_msg)
  return _internal_mutable_ret_msg();
}
inline const std::string& LoginReponse::_internal_ret_msg() const {
  return ret_msg_.GetNoArena();
}
inline void LoginReponse::_internal_set_ret_msg(const std::string& value) {
  
  ret_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LoginReponse::set_ret_msg(std::string&& value) {
  
  ret_msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Agent.LoginReponse.ret_msg)
}
inline void LoginReponse::set_ret_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ret_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Agent.LoginReponse.ret_msg)
}
inline void LoginReponse::set_ret_msg(const void* value, size_t size) {
  
  ret_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Agent.LoginReponse.ret_msg)
}
inline std::string* LoginReponse::_internal_mutable_ret_msg() {
  
  return ret_msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginReponse::release_ret_msg() {
  // @@protoc_insertion_point(field_release:Agent.LoginReponse.ret_msg)
  
  return ret_msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginReponse::set_allocated_ret_msg(std::string* ret_msg) {
  if (ret_msg != nullptr) {
    
  } else {
    
  }
  ret_msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ret_msg);
  // @@protoc_insertion_point(field_set_allocated:Agent.LoginReponse.ret_msg)
}

// fixed32 ttl = 3;
inline void LoginReponse::clear_ttl() {
  ttl_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoginReponse::_internal_ttl() const {
  return ttl_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoginReponse::ttl() const {
  // @@protoc_insertion_point(field_get:Agent.LoginReponse.ttl)
  return _internal_ttl();
}
inline void LoginReponse::_internal_set_ttl(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ttl_ = value;
}
inline void LoginReponse::set_ttl(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ttl(value);
  // @@protoc_insertion_point(field_set:Agent.LoginReponse.ttl)
}

// -------------------------------------------------------------------

// Friend

// bytes name = 1;
inline void Friend::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Friend::name() const {
  // @@protoc_insertion_point(field_get:Agent.Friend.name)
  return _internal_name();
}
inline void Friend::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Agent.Friend.name)
}
inline std::string* Friend::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Agent.Friend.name)
  return _internal_mutable_name();
}
inline const std::string& Friend::_internal_name() const {
  return name_.GetNoArena();
}
inline void Friend::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Friend::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Agent.Friend.name)
}
inline void Friend::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Agent.Friend.name)
}
inline void Friend::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Agent.Friend.name)
}
inline std::string* Friend::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Friend::release_name() {
  // @@protoc_insertion_point(field_release:Agent.Friend.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Friend::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Agent.Friend.name)
}

// bool online = 2;
inline void Friend::clear_online() {
  online_ = false;
}
inline bool Friend::_internal_online() const {
  return online_;
}
inline bool Friend::online() const {
  // @@protoc_insertion_point(field_get:Agent.Friend.online)
  return _internal_online();
}
inline void Friend::_internal_set_online(bool value) {
  
  online_ = value;
}
inline void Friend::set_online(bool value) {
  _internal_set_online(value);
  // @@protoc_insertion_point(field_set:Agent.Friend.online)
}

// .Agent.FriendStatus status = 3;
inline void Friend::clear_status() {
  status_ = 0;
}
inline ::Agent::FriendStatus Friend::_internal_status() const {
  return static_cast< ::Agent::FriendStatus >(status_);
}
inline ::Agent::FriendStatus Friend::status() const {
  // @@protoc_insertion_point(field_get:Agent.Friend.status)
  return _internal_status();
}
inline void Friend::_internal_set_status(::Agent::FriendStatus value) {
  
  status_ = value;
}
inline void Friend::set_status(::Agent::FriendStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:Agent.Friend.status)
}

// -------------------------------------------------------------------

// GetFriendsResponse

// repeated .Agent.Friend friends = 1;
inline int GetFriendsResponse::_internal_friends_size() const {
  return friends_.size();
}
inline int GetFriendsResponse::friends_size() const {
  return _internal_friends_size();
}
inline void GetFriendsResponse::clear_friends() {
  friends_.Clear();
}
inline ::Agent::Friend* GetFriendsResponse::mutable_friends(int index) {
  // @@protoc_insertion_point(field_mutable:Agent.GetFriendsResponse.friends)
  return friends_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Agent::Friend >*
GetFriendsResponse::mutable_friends() {
  // @@protoc_insertion_point(field_mutable_list:Agent.GetFriendsResponse.friends)
  return &friends_;
}
inline const ::Agent::Friend& GetFriendsResponse::_internal_friends(int index) const {
  return friends_.Get(index);
}
inline const ::Agent::Friend& GetFriendsResponse::friends(int index) const {
  // @@protoc_insertion_point(field_get:Agent.GetFriendsResponse.friends)
  return _internal_friends(index);
}
inline ::Agent::Friend* GetFriendsResponse::_internal_add_friends() {
  return friends_.Add();
}
inline ::Agent::Friend* GetFriendsResponse::add_friends() {
  // @@protoc_insertion_point(field_add:Agent.GetFriendsResponse.friends)
  return _internal_add_friends();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Agent::Friend >&
GetFriendsResponse::friends() const {
  // @@protoc_insertion_point(field_list:Agent.GetFriendsResponse.friends)
  return friends_;
}

// -------------------------------------------------------------------

// SendMessageRequest

// bytes receiver = 1;
inline void SendMessageRequest::clear_receiver() {
  receiver_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SendMessageRequest::receiver() const {
  // @@protoc_insertion_point(field_get:Agent.SendMessageRequest.receiver)
  return _internal_receiver();
}
inline void SendMessageRequest::set_receiver(const std::string& value) {
  _internal_set_receiver(value);
  // @@protoc_insertion_point(field_set:Agent.SendMessageRequest.receiver)
}
inline std::string* SendMessageRequest::mutable_receiver() {
  // @@protoc_insertion_point(field_mutable:Agent.SendMessageRequest.receiver)
  return _internal_mutable_receiver();
}
inline const std::string& SendMessageRequest::_internal_receiver() const {
  return receiver_.GetNoArena();
}
inline void SendMessageRequest::_internal_set_receiver(const std::string& value) {
  
  receiver_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SendMessageRequest::set_receiver(std::string&& value) {
  
  receiver_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Agent.SendMessageRequest.receiver)
}
inline void SendMessageRequest::set_receiver(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  receiver_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Agent.SendMessageRequest.receiver)
}
inline void SendMessageRequest::set_receiver(const void* value, size_t size) {
  
  receiver_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Agent.SendMessageRequest.receiver)
}
inline std::string* SendMessageRequest::_internal_mutable_receiver() {
  
  return receiver_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SendMessageRequest::release_receiver() {
  // @@protoc_insertion_point(field_release:Agent.SendMessageRequest.receiver)
  
  return receiver_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SendMessageRequest::set_allocated_receiver(std::string* receiver) {
  if (receiver != nullptr) {
    
  } else {
    
  }
  receiver_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), receiver);
  // @@protoc_insertion_point(field_set_allocated:Agent.SendMessageRequest.receiver)
}

// bytes text = 2;
inline void SendMessageRequest::clear_text() {
  text_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SendMessageRequest::text() const {
  // @@protoc_insertion_point(field_get:Agent.SendMessageRequest.text)
  return _internal_text();
}
inline void SendMessageRequest::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:Agent.SendMessageRequest.text)
}
inline std::string* SendMessageRequest::mutable_text() {
  // @@protoc_insertion_point(field_mutable:Agent.SendMessageRequest.text)
  return _internal_mutable_text();
}
inline const std::string& SendMessageRequest::_internal_text() const {
  return text_.GetNoArena();
}
inline void SendMessageRequest::_internal_set_text(const std::string& value) {
  
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SendMessageRequest::set_text(std::string&& value) {
  
  text_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Agent.SendMessageRequest.text)
}
inline void SendMessageRequest::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Agent.SendMessageRequest.text)
}
inline void SendMessageRequest::set_text(const void* value, size_t size) {
  
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Agent.SendMessageRequest.text)
}
inline std::string* SendMessageRequest::_internal_mutable_text() {
  
  return text_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SendMessageRequest::release_text() {
  // @@protoc_insertion_point(field_release:Agent.SendMessageRequest.text)
  
  return text_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SendMessageRequest::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:Agent.SendMessageRequest.text)
}

// -------------------------------------------------------------------

// FriendNotification

// bytes name = 1;
inline void FriendNotification::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FriendNotification::name() const {
  // @@protoc_insertion_point(field_get:Agent.FriendNotification.name)
  return _internal_name();
}
inline void FriendNotification::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Agent.FriendNotification.name)
}
inline std::string* FriendNotification::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Agent.FriendNotification.name)
  return _internal_mutable_name();
}
inline const std::string& FriendNotification::_internal_name() const {
  return name_.GetNoArena();
}
inline void FriendNotification::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FriendNotification::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Agent.FriendNotification.name)
}
inline void FriendNotification::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Agent.FriendNotification.name)
}
inline void FriendNotification::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Agent.FriendNotification.name)
}
inline std::string* FriendNotification::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FriendNotification::release_name() {
  // @@protoc_insertion_point(field_release:Agent.FriendNotification.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FriendNotification::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Agent.FriendNotification.name)
}

// bool online = 2;
inline void FriendNotification::clear_online() {
  online_ = false;
}
inline bool FriendNotification::_internal_online() const {
  return online_;
}
inline bool FriendNotification::online() const {
  // @@protoc_insertion_point(field_get:Agent.FriendNotification.online)
  return _internal_online();
}
inline void FriendNotification::_internal_set_online(bool value) {
  
  online_ = value;
}
inline void FriendNotification::set_online(bool value) {
  _internal_set_online(value);
  // @@protoc_insertion_point(field_set:Agent.FriendNotification.online)
}

// -------------------------------------------------------------------

// MessageNotification

// bytes sender = 1;
inline void MessageNotification::clear_sender() {
  sender_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MessageNotification::sender() const {
  // @@protoc_insertion_point(field_get:Agent.MessageNotification.sender)
  return _internal_sender();
}
inline void MessageNotification::set_sender(const std::string& value) {
  _internal_set_sender(value);
  // @@protoc_insertion_point(field_set:Agent.MessageNotification.sender)
}
inline std::string* MessageNotification::mutable_sender() {
  // @@protoc_insertion_point(field_mutable:Agent.MessageNotification.sender)
  return _internal_mutable_sender();
}
inline const std::string& MessageNotification::_internal_sender() const {
  return sender_.GetNoArena();
}
inline void MessageNotification::_internal_set_sender(const std::string& value) {
  
  sender_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MessageNotification::set_sender(std::string&& value) {
  
  sender_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Agent.MessageNotification.sender)
}
inline void MessageNotification::set_sender(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sender_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Agent.MessageNotification.sender)
}
inline void MessageNotification::set_sender(const void* value, size_t size) {
  
  sender_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Agent.MessageNotification.sender)
}
inline std::string* MessageNotification::_internal_mutable_sender() {
  
  return sender_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MessageNotification::release_sender() {
  // @@protoc_insertion_point(field_release:Agent.MessageNotification.sender)
  
  return sender_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MessageNotification::set_allocated_sender(std::string* sender) {
  if (sender != nullptr) {
    
  } else {
    
  }
  sender_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender);
  // @@protoc_insertion_point(field_set_allocated:Agent.MessageNotification.sender)
}

// bytes text = 2;
inline void MessageNotification::clear_text() {
  text_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MessageNotification::text() const {
  // @@protoc_insertion_point(field_get:Agent.MessageNotification.text)
  return _internal_text();
}
inline void MessageNotification::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:Agent.MessageNotification.text)
}
inline std::string* MessageNotification::mutable_text() {
  // @@protoc_insertion_point(field_mutable:Agent.MessageNotification.text)
  return _internal_mutable_text();
}
inline const std::string& MessageNotification::_internal_text() const {
  return text_.GetNoArena();
}
inline void MessageNotification::_internal_set_text(const std::string& value) {
  
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MessageNotification::set_text(std::string&& value) {
  
  text_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Agent.MessageNotification.text)
}
inline void MessageNotification::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Agent.MessageNotification.text)
}
inline void MessageNotification::set_text(const void* value, size_t size) {
  
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Agent.MessageNotification.text)
}
inline std::string* MessageNotification::_internal_mutable_text() {
  
  return text_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MessageNotification::release_text() {
  // @@protoc_insertion_point(field_release:Agent.MessageNotification.text)
  
  return text_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MessageNotification::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:Agent.MessageNotification.text)
}

// string timestamp = 3;
inline void MessageNotification::clear_timestamp() {
  timestamp_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MessageNotification::timestamp() const {
  // @@protoc_insertion_point(field_get:Agent.MessageNotification.timestamp)
  return _internal_timestamp();
}
inline void MessageNotification::set_timestamp(const std::string& value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Agent.MessageNotification.timestamp)
}
inline std::string* MessageNotification::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:Agent.MessageNotification.timestamp)
  return _internal_mutable_timestamp();
}
inline const std::string& MessageNotification::_internal_timestamp() const {
  return timestamp_.GetNoArena();
}
inline void MessageNotification::_internal_set_timestamp(const std::string& value) {
  
  timestamp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MessageNotification::set_timestamp(std::string&& value) {
  
  timestamp_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Agent.MessageNotification.timestamp)
}
inline void MessageNotification::set_timestamp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  timestamp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Agent.MessageNotification.timestamp)
}
inline void MessageNotification::set_timestamp(const char* value, size_t size) {
  
  timestamp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Agent.MessageNotification.timestamp)
}
inline std::string* MessageNotification::_internal_mutable_timestamp() {
  
  return timestamp_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MessageNotification::release_timestamp() {
  // @@protoc_insertion_point(field_release:Agent.MessageNotification.timestamp)
  
  return timestamp_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MessageNotification::set_allocated_timestamp(std::string* timestamp) {
  if (timestamp != nullptr) {
    
  } else {
    
  }
  timestamp_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timestamp);
  // @@protoc_insertion_point(field_set_allocated:Agent.MessageNotification.timestamp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Agent

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Agent::AgentErrno> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Agent::AgentErrno>() {
  return ::Agent::AgentErrno_descriptor();
}
template <> struct is_proto_enum< ::Agent::AgentCommand> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Agent::AgentCommand>() {
  return ::Agent::AgentCommand_descriptor();
}
template <> struct is_proto_enum< ::Agent::AgentAppId> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Agent::AgentAppId>() {
  return ::Agent::AgentAppId_descriptor();
}
template <> struct is_proto_enum< ::Agent::AgentPacket> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Agent::AgentPacket>() {
  return ::Agent::AgentPacket_descriptor();
}
template <> struct is_proto_enum< ::Agent::AgentOpcode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Agent::AgentOpcode>() {
  return ::Agent::AgentOpcode_descriptor();
}
template <> struct is_proto_enum< ::Agent::FriendStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Agent::FriendStatus>() {
  return ::Agent::FriendStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Agent_2eproto
